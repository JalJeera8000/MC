import numpy as np
from scipy.special import erfc  
import matplotlib.pyplot as plt

# Parameters 
N = int(1e6)
Eb_N0_dB = np.arange(0, 60)  # SNR in dB

# Transmitter 
ip = np.random.rand(N) > 0.5 
s = 2 * ip - 1  # BPSK: 0 -> -1, 1 -> +1

# Simulation 
nErr = np.zeros(len(Eb_N0_dB)) 

for i, Eb_N0 in enumerate(Eb_N0_dB): 
    n = np.sqrt(0.5) * (np.random.randn(N) + 1j * np.random.randn(N)) 
    h = np.sqrt(0.5) * (np.random.randn(N) + 1j * np.random.randn(N))
    y = h * s + np.sqrt(10**(-Eb_N0/10)) * n

    # Equalization
    y_eq = y / h
    ipHat = (np.real(y_eq) > 0).astype(int) 
    nErr[i] = np.sum(ip != ipHat) 

# BER calculation 
simBer = nErr / N 
theoryBerAWGN = 0.5 * erfc(np.sqrt(10**(Eb_N0_dB/10))) 
theoryBerRayleigh = 0.5 * (1 - np.sqrt(10**(Eb_N0_dB/10) / (1 + 10**(Eb_N0_dB/10)))) 

# Plot 
plt.semilogy(Eb_N0_dB, theoryBerAWGN, 'cd-', linewidth=2)   
plt.semilogy(Eb_N0_dB, theoryBerRayleigh, 'bp-', linewidth=2)       
plt.semilogy(Eb_N0_dB, simBer, 'mx-', linewidth=2)          

plt.axis([0, 35, 1e-5, 0.5]) 
plt.grid(True, which="both") 
plt.legend(['AWGN-Theory', 'Rayleigh-Theory', 'Rayleigh-Simulation']) 
plt.xlabel('Eb/No (dB)') 
plt.ylabel('Bit Error Rate (BER)') 
plt.title('BER for BPSK over Rayleigh Fading Channel')
plt.show()
